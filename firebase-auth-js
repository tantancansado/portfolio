// firebase-auth.js - Sistema de Autenticación con Firebase
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
import { 
    getAuth, 
    createUserWithEmailAndPassword, 
    signInWithEmailAndPassword, 
    signOut, 
    onAuthStateChanged,
    updateProfile
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
import { 
    getFirestore, 
    doc, 
    setDoc, 
    getDoc, 
    updateDoc,
    collection,
    addDoc,
    getDocs,
    query,
    where,
    orderBy
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';

// Configuración de Firebase (reemplaza con tu config)
const firebaseConfig = {
    apiKey: "tu-api-key-aqui",
    authDomain: "tu-proyecto.firebaseapp.com",
    projectId: "tu-proyecto-id",
    storageBucket: "tu-proyecto.appspot.com",
    messagingSenderId: "123456789",
    appId: "1:123456789:web:abcdef123456"
};

// IMPORTANTE: Reemplaza la config arriba con la tuya de Firebase Console

class FirebaseAuthSystem {
    constructor() {
        this.app = initializeApp(firebaseConfig);
        this.auth = getAuth(this.app);
        this.db = getFirestore(this.app);
        this.currentUser = null;
        this.isAuthenticated = false;
        
        this.init();
    }

    async init() {
        try {
            this.createAuthUI();
            this.setupEventListeners();
            
            // Escuchar cambios de autenticación
            onAuthStateChanged(this.auth, async (user) => {
                if (user) {
                    this.currentUser = user;
                    this.isAuthenticated = true;
                    await this.loadUserData();
                    this.showMainApp();
                    this.showNotification(`¡Bienvenido ${user.displayName || user.email}!`, 'success');
                } else {
                    this.currentUser = null;
                    this.isAuthenticated = false;
                    this.showAuthForm();
                }
            });
        } catch (error) {
            console.error('Error inicializando Firebase:', error);
            this.showNotification('Error de configuración. Verifica tu conexión.', 'error');
        }
    }

    // Crear interfaz de autenticación
    createAuthUI() {
        const authHTML = `
            <div id="authOverlay" class="auth-overlay">
                <div class="auth-container">
                    <div class="auth-header">
                        <h1>🔐 Trading Portfolio</h1>
                        <p>Accede a tu cartera de inversiones</p>
                    </div>
                    
                    <div class="auth-tabs">
                        <button class="auth-tab active" onclick="firebaseAuth.switchTab('login')">Iniciar Sesión</button>
                        <button class="auth-tab" onclick="firebaseAuth.switchTab('register')">Registrarse</button>
                    </div>
                    
                    <!-- Login Form -->
                    <form id="loginForm" class="auth-form active">
                        <div class="form-group">
                            <label for="loginEmail">Email</label>
                            <input type="email" id="loginEmail" required placeholder="tu@email.com">
                        </div>
                        <div class="form-group">
                            <label for="loginPassword">Contraseña</label>
                            <input type="password" id="loginPassword" required placeholder="Tu contraseña">
                        </div>
                        <button type="submit" class="btn btn-primary btn-full">
                            <span class="btn-text">Iniciar Sesión</span>
                            <span class="btn-loading" style="display: none;">🔄 Iniciando...</span>
                        </button>
                    </form>
                    
                    <!-- Register Form -->
                    <form id="registerForm" class="auth-form">
                        <div class="form-group">
                            <label for="registerName">Nombre completo</label>
                            <input type="text" id="registerName" required placeholder="Tu nombre completo">
                        </div>
                        <div class="form-group">
                            <label for="registerEmail">Email</label>
                            <input type="email" id="registerEmail" required placeholder="tu@email.com">
                        </div>
                        <div class="form-group">
                            <label for="registerPassword">Contraseña</label>
                            <input type="password" id="registerPassword" required placeholder="Mínimo 6 caracteres">
                        </div>
                        <div class="form-group">
                            <label for="registerConfirmPassword">Confirmar contraseña</label>
                            <input type="password" id="registerConfirmPassword" required placeholder="Confirma tu contraseña">
                        </div>
                        <button type="submit" class="btn btn-primary btn-full">
                            <span class="btn-text">Registrarse</span>
                            <span class="btn-loading" style="display: none;">🔄 Registrando...</span>
                        </button>
                    </form>
                    
                    <div class="auth-demo">
                        <p>Demo con datos de prueba:</p>
                        <button class="btn btn-secondary btn-small" onclick="firebaseAuth.fillDemoCredentials()">
                            Usar credenciales demo
                        </button>
                        <small>Email: demo@trading.com | Contraseña: demo123</small>
                    </div>
                </div>
            </div>
        `;

        // Agregar estilos CSS (igual que antes)
        const authStyles = `
            <style id="authStyles">
                .auth-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: var(--bg-gradient);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 2000;
                    animation: fadeIn 0.5s ease;
                }

                .auth-container {
                    background: var(--glass-bg);
                    backdrop-filter: blur(40px) saturate(180%);
                    border: 1px solid var(--glass-border);
                    border-radius: 24px;
                    padding: 40px;
                    width: 100%;
                    max-width: 450px;
                    box-shadow: 
                        0 20px 60px var(--shadow-dark),
                        inset 0 1px 0 var(--shadow-light);
                    animation: scaleIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);
                }

                .auth-header {
                    text-align: center;
                    margin-bottom: 30px;
                }

                .auth-header h1 {
                    color: var(--text-primary);
                    font-size: 2.5em;
                    font-weight: 800;
                    margin-bottom: 8px;
                }

                .auth-header p {
                    color: var(--text-secondary);
                    font-size: 1.1em;
                }

                .auth-tabs {
                    display: flex;
                    margin-bottom: 30px;
                    border-radius: 12px;
                    background: var(--input-bg);
                    padding: 4px;
                }

                .auth-tab {
                    flex: 1;
                    padding: 12px 16px;
                    border: none;
                    background: transparent;
                    color: var(--text-secondary);
                    font-weight: 600;
                    border-radius: 8px;
                    cursor: pointer;
                    transition: all 0.3s ease;
                }

                .auth-tab.active {
                    background: var(--card-bg);
                    color: var(--text-primary);
                    box-shadow: 0 2px 8px var(--shadow-dark);
                }

                .auth-form {
                    display: none;
                }

                .auth-form.active {
                    display: block;
                    animation: fadeInUp 0.4s ease;
                }

                .btn-full {
                    width: 100%;
                    margin-top: 20px;
                    position: relative;
                }

                .btn-loading {
                    position: absolute;
                    left: 50%;
                    top: 50%;
                    transform: translate(-50%, -50%);
                }

                .auth-demo {
                    margin-top: 30px;
                    text-align: center;
                    padding-top: 20px;
                    border-top: 1px solid var(--table-border);
                }

                .auth-demo p {
                    color: var(--text-secondary);
                    margin-bottom: 12px;
                    font-size: 0.9em;
                }

                .auth-demo small {
                    display: block;
                    color: var(--text-muted);
                    font-size: 0.8em;
                    margin-top: 8px;
                }

                @media (max-width: 480px) {
                    .auth-container {
                        margin: 20px;
                        padding: 30px 24px;
                    }
                }
            </style>
        `;

        document.head.insertAdjacentHTML('beforeend', authStyles);
        document.body.insertAdjacentHTML('beforeend', authHTML);
    }

    // Configurar event listeners
    setupEventListeners() {
        // Form de login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            await this.login(email, password);
        });

        // Form de registro
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const name = document.getElementById('registerName').value;
            const email = document.getElementById('registerEmail').value;
            const password = document.getElementById('registerPassword').value;
            const confirmPassword = document.getElementById('registerConfirmPassword').value;
            
            if (password !== confirmPassword) {
                this.showNotification('Las contraseñas no coinciden', 'error');
                return;
            }

            if (password.length < 6) {
                this.showNotification('La contraseña debe tener al menos 6 caracteres', 'error');
                return;
            }

            await this.register(name, email, password);
        });
    }

    // Login con Firebase
    async login(email, password) {
        try {
            this.setButtonLoading('loginForm', true);
            
            const userCredential = await signInWithEmailAndPassword(this.auth, email, password);
            // El listener onAuthStateChanged manejará el resto
            
        } catch (error) {
            console.error('Error en login:', error);
            let message = 'Error al iniciar sesión';
            
            switch (error.code) {
                case 'auth/user-not-found':
                    message = 'Usuario no encontrado';
                    break;
                case 'auth/wrong-password':
                    message = 'Contraseña incorrecta';
                    break;
                case 'auth/invalid-email':
                    message = 'Email inválido';
                    break;
                case 'auth/too-many-requests':
                    message = 'Demasiados intentos. Intenta más tarde';
                    break;
                default:
                    message = error.message;
            }
            
            this.showNotification(message, 'error');
        } finally {
            this.setButtonLoading('loginForm', false);
        }
    }

    // Registro con Firebase
    async register(name, email, password) {
        try {
            this.setButtonLoading('registerForm', true);
            
            // Crear usuario en Firebase Auth
            const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);
            const user = userCredential.user;
            
            // Actualizar perfil con nombre
            await updateProfile(user, {
                displayName: name
            });
            
            // Crear documento de usuario en Firestore
            await setDoc(doc(this.db, 'users', user.uid), {
                name: name,
                email: email,
                createdAt: new Date().toISOString(),
                settings: {
                    theme: 'dark',
                    currency: 'USD',
                    notifications: true
                }
            });
            
            // Crear portfolio vacío inicial
            await setDoc(doc(this.db, 'portfolios', user.uid), {
                userId: user.uid,
                name: `📈 Cartera de ${name}`,
                stocks: [],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            });
            
            this.showNotification('¡Cuenta creada exitosamente!', 'success');
            this.switchTab('login');
            
            // Llenar campos de login
            document.getElementById('loginEmail').value = email;
            
        } catch (error) {
            console.error('Error en registro:', error);
            let message = 'Error al crear la cuenta';
            
            switch (error.code) {
                case 'auth/email-already-in-use':
                    message = 'Este email ya está en uso';
                    break;
                case 'auth/invalid-email':
                    message = 'Email inválido';
                    break;
                case 'auth/weak-password':
                    message = 'La contraseña es muy débil';
                    break;
                default:
                    message = error.message;
            }
            
            this.showNotification(message, 'error');
        } finally {
            this.setButtonLoading('registerForm', false);
        }
    }

    // Logout
    async logout() {
        try {
            await signOut(this.auth);
            this.showNotification('Has cerrado sesión exitosamente', 'success');
        } catch (error) {
            console.error('Error en logout:', error);
            this.showNotification('Error al cerrar sesión', 'error');
        }
    }

    // Cargar datos del usuario desde Firestore
    async loadUserData() {
        if (!this.currentUser) return;
        
        try {
            // Cargar datos del usuario
            const userDoc = await getDoc(doc(this.db, 'users', this.currentUser.uid));
            if (userDoc.exists()) {
                this.userData = userDoc.data();
            }
            
            // Cargar portfolio
            const portfolioDoc = await getDoc(doc(this.db, 'portfolios', this.currentUser.uid));
            if (portfolioDoc.exists()) {
                this.portfolioData = portfolioDoc.data();
                
                // Actualizar variables globales de la app
                if (window.portfolio !== undefined) {
                    window.portfolio = this.portfolioData.stocks || [];
                    window.portfolioName = this.portfolioData.name || `📈 Cartera de ${this.currentUser.displayName}`;
                    
                    // Aplicar tema
                    if (this.userData && this.userData.settings && this.userData.settings.theme) {
                        window.changeTheme(this.userData.settings.theme);
                    }
                    
                    // Re-renderizar
                    if (window.renderPortfolio) {
                        window.renderPortfolio();
                    }
                }
            }
            
        } catch (error) {
            console.error('Error cargando datos del usuario:', error);
        }
    }

    // Guardar portfolio en Firestore
    async savePortfolio(portfolio, portfolioName) {
        if (!this.currentUser) return;
        
        try {
            await updateDoc(doc(this.db, 'portfolios', this.currentUser.uid), {
                stocks: portfolio,
                name: portfolioName,
                updatedAt: new Date().toISOString()
            });
        } catch (error) {
            console.error('Error guardando portfolio:', error);
            this.showNotification('Error al guardar los datos', 'error');
        }
    }

    // Guardar configuraciones del usuario
    async saveUserSettings(settings) {
        if (!this.currentUser) return;
        
        try {
            await updateDoc(doc(this.db, 'users', this.currentUser.uid), {
                settings: settings
            });
        } catch (error) {
            console.error('Error guardando configuraciones:', error);
        }
    }

    // Utilidades UI
    setButtonLoading(formId, loading) {
        const form = document.getElementById(formId);
        const button = form.querySelector('button[type="submit"]');
        const textSpan = button.querySelector('.btn-text');
        const loadingSpan = button.querySelector('.btn-loading');
        
        if (loading) {
            textSpan.style.display = 'none';
            loadingSpan.style.display = 'block';
            button.disabled = true;
        } else {
            textSpan.style.display = 'block';
            loadingSpan.style.display = 'none';
            button.disabled = false;
        }
    }

    switchTab(tab) {
        document.querySelectorAll('.auth-tab').forEach(t => t.classList.remove('active'));
        document.querySelector(`[onclick="firebaseAuth.switchTab('${tab}')"]`).classList.add('active');
        
        document.querySelectorAll('.auth-form').forEach(f => f.classList.remove('active'));
        document.getElementById(`${tab}Form`).classList.add('active');
    }

    fillDemoCredentials() {
        this.switchTab('login');
        document.getElementById('loginEmail').value = 'demo@trading.com';
        document.getElementById('loginPassword').value = 'demo123';
    }

    showMainApp() {
        const authOverlay = document.getElementById('authOverlay');
        if (authOverlay) {
            authOverlay.style.display = 'none';
        }
        
        document.querySelector('.container').style.display = 'block';
        this.updateUserInfo();
    }

    showAuthForm() {
        const authOverlay = document.getElementById('authOverlay');
        if (authOverlay) {
            authOverlay.style.display = 'flex';
        }
        
        document.querySelector('.container').style.display = 'none';
    }

    updateUserInfo() {
        if (!this.isAuthenticated || !this.currentUser) return;
        
        let userBar = document.getElementById('userBar');
        if (!userBar) {
            userBar = document.createElement('div');
            userBar.id = 'userBar';
            userBar.className = 'user-bar';
            userBar.innerHTML = `
                <div class="user-info">
                    <span class="user-avatar">👤</span>
                    <div class="user-details">
                        <span class="user-name">${this.currentUser.displayName || this.currentUser.email}</span>
                        <span class="user-role">Trader</span>
                    </div>
                </div>
                <button class="btn btn-secondary btn-small" onclick="firebaseAuth.logout()">
                    🚪 Cerrar Sesión
                </button>
            `;
            
            const themeSelector = document.querySelector('.theme-selector');
            themeSelector.parentNode.insertBefore(userBar, themeSelector.nextSibling);
        }
        
        // Agregar estilos para la barra de usuario (igual que antes)
        if (!document.getElementById('userBarStyles')) {
            const userBarStyles = document.createElement('style');
            userBarStyles.id = 'userBarStyles';
            userBarStyles.textContent = `
                .user-bar {
                    position: fixed;
                    top: 20px;
                    left: 20px;
                    background: var(--glass-bg);
                    backdrop-filter: blur(24px) saturate(180%);
                    border: 1px solid var(--glass-border);
                    border-radius: 20px;
                    padding: 16px 20px;
                    display: flex;
                    gap: 16px;
                    align-items: center;
                    z-index: 100;
                    animation: slideInLeft 0.8s cubic-bezier(0.4, 0, 0.2, 1);
                    box-shadow: 0 8px 32px var(--shadow-dark);
                }

                .user-info {
                    display: flex;
                    align-items: center;
                    gap: 12px;
                }

                .user-avatar {
                    width: 40px;
                    height: 40px;
                    background: var(--card-bg);
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 1.2em;
                    border: 2px solid var(--glass-border);
                }

                .user-details {
                    display: flex;
                    flex-direction: column;
                }

                .user-name {
                    color: var(--text-primary);
                    font-weight: 700;
                    font-size: 0.95em;
                }

                .user-role {
                    color: var(--text-secondary);
                    font-size: 0.8em;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }

                @keyframes slideInLeft {
                    from {
                        opacity: 0;
                        transform: translateX(-50px);
                    }
                    to {
                        opacity: 1;
                        transform: translateX(0);
                    }
                }

                @media (max-width: 768px) {
                    .user-bar {
                        top: 10px;
                        left: 10px;
                        padding: 12px 16px;
                    }
                    
                    .user-details {
                        display: none;
                    }
                }
            `;
            document.head.appendChild(userBarStyles);
        }
    }

    getCurrentUser() {
        return this.isAuthenticated ? this.currentUser : null;
    }

    requireAuth() {
        if (!this.isAuthenticated) {
            this.showNotification('Debes iniciar sesión para realizar esta acción', 'error');
            this.showAuthForm();
            return false;
        }
        return true;
    }

    showNotification(message, type = 'success') {
        if (window.showNotification) {
            window.showNotification(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }
}

// Inicializar sistema de autenticación
window.firebaseAuth = new FirebaseAuthSystem();